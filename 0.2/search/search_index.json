{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Otto","text":"<p>The Ottomatic video engine</p>"},{"location":"#install","title":"install","text":"<p>Clone the repository</p> <pre><code>git clone https://github.com/quaternionmedia/otto.git\ncd otto/\n</code></pre>"},{"location":"#poetry-recommended","title":"Poetry (Recommended)","text":"<p>Install with poetry</p> <pre><code>poetry install\n</code></pre>"},{"location":"#pip","title":"Pip","text":"<pre><code>pip3 install -e .\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>Reference for Otto classes</p>"},{"location":"reference/main/","title":"Main","text":"<p>Otto.main</p> <p>The primary app.</p> <p>This initializes the main FastAPI <code>app</code> and attaches all routes to it.</p>"},{"location":"reference/main/#otto.main.app","title":"<code>app = FastAPI()</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#otto.main.app--the-main-app","title":"The main app","text":""},{"location":"reference/main/#otto.main.getTemplates","title":"<code>getTemplates()</code>  <code>async</code>","text":""},{"location":"reference/main/#otto.main.getTemplates--get-templates","title":"Get templates","text":"<p>Returns a list of template names currently loaded and available.</p> Source code in <code>otto/main.py</code> <pre><code>@app.get('/templates')\nasync def getTemplates() -&gt; list:\n\"\"\"# Get templates\n    Returns a list of template names currently loaded and available.\"\"\"\n    return [t for t in dir(templates) if t.islower() and t[0] != '_']\n</code></pre>"},{"location":"reference/main/#otto.main.version","title":"<code>version()</code>","text":""},{"location":"reference/main/#otto.main.version--version","title":"Version","text":"<p>Return version information</p> <p>JSON with version number</p> Name Type Description <code>otto</code> <code>str</code> <p>version number</p> <p>{     'otto': 'SEMANTIC.VERSION.NUMBER' }</p> Source code in <code>otto/main.py</code> <pre><code>@app.get('/')\ndef version() -&gt; dict:\n\"\"\"# Version\n\n    Return version information\n    Args:\n\n    Returns: JSON with version number\n        otto (str): version number\n\n            {\n                'otto': 'SEMANTIC.VERSION.NUMBER'\n            }\n    \"\"\"\n    return {'otto': __version__}\n</code></pre>"},{"location":"reference/models/","title":"Models","text":"<p>Otto models</p> <p>Generic model classes for media and template data</p>"},{"location":"reference/models/#otto.models.ImageFormat","title":"<code>ImageFormat = Literal['jpg', 'png']</code>  <code>module-attribute</code>","text":"<p>Available Image output formats</p>"},{"location":"reference/models/#otto.models.VideoFormat","title":"<code>VideoFormat = Literal['mp4', 'mkv', 'mpg', 'avi']</code>  <code>module-attribute</code>","text":"<p>Available Video output formats</p>"},{"location":"reference/models/#otto.models.Clip","title":"<code>Clip</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Generic Clip properties</p> <p>A Clip is a single element of an EDL.</p> Source code in <code>otto/models.py</code> <pre><code>class Clip(BaseModel):\n\"\"\"Generic Clip properties\n\n    A Clip is a single element of an EDL.\n    \"\"\"\n\n    duration: float = 5\n\"\"\"The length of the clip, in seconds\"\"\"\n\n    type: Optional[str]\n\"\"\"The source type: video, image, template\"\"\"\n\n    name: Optional[str]\n\"\"\"The name of the template, or the url of the media\"\"\"\n\n    inpoint: Optional[float]\n\"\"\"The start time of the clip\"\"\"\n\n    outpoint: Optional[float]\n\"\"\"The end time of the clip, relative to the beginning of the clip\"\"\"\n\n    offset: Optional[float]\n\"\"\"Offset the start time of the clip. **Depricated. Use start**\"\"\"\n\n    start: Optional[float]\n\"\"\"Offset the start time of the clip\"\"\"\n\n    position: Optional[Union[Tuple, str]]\n\"\"\"Change the (x, y) position of the clip\"\"\"\n\n    resize: Optional[Union[float, tuple]]\n\"\"\"Scale the clip by (x, y)\"\"\"\n\n    relative: Optional[bool] = True\n\"\"\"Use relative positioning. Default = True\"\"\"\n\n    opacity: Optional[float]\n\"\"\"The opacity of the clip.\n\n    Values:\n        0: transparent\n        1.0: opaque\"\"\"\n    fadeOut: Optional[float] = 1\n    fadeIn: Optional[float] = 1\n    clipsize: Optional[tuple]\n    data: Optional[TemplateData]\n</code></pre>"},{"location":"reference/models/#otto.models.Clip.duration","title":"<code>duration: float = 5</code>  <code>class-attribute</code>","text":"<p>The length of the clip, in seconds</p>"},{"location":"reference/models/#otto.models.Clip.inpoint","title":"<code>inpoint: Optional[float]</code>  <code>class-attribute</code>","text":"<p>The start time of the clip</p>"},{"location":"reference/models/#otto.models.Clip.name","title":"<code>name: Optional[str]</code>  <code>class-attribute</code>","text":"<p>The name of the template, or the url of the media</p>"},{"location":"reference/models/#otto.models.Clip.offset","title":"<code>offset: Optional[float]</code>  <code>class-attribute</code>","text":"<p>Offset the start time of the clip. Depricated. Use start</p>"},{"location":"reference/models/#otto.models.Clip.opacity","title":"<code>opacity: Optional[float]</code>  <code>class-attribute</code>","text":"<p>The opacity of the clip.</p> Values <p>0: transparent 1.0: opaque</p>"},{"location":"reference/models/#otto.models.Clip.outpoint","title":"<code>outpoint: Optional[float]</code>  <code>class-attribute</code>","text":"<p>The end time of the clip, relative to the beginning of the clip</p>"},{"location":"reference/models/#otto.models.Clip.position","title":"<code>position: Optional[Union[Tuple, str]]</code>  <code>class-attribute</code>","text":"<p>Change the (x, y) position of the clip</p>"},{"location":"reference/models/#otto.models.Clip.relative","title":"<code>relative: Optional[bool] = True</code>  <code>class-attribute</code>","text":"<p>Use relative positioning. Default = True</p>"},{"location":"reference/models/#otto.models.Clip.resize","title":"<code>resize: Optional[Union[float, tuple]]</code>  <code>class-attribute</code>","text":"<p>Scale the clip by (x, y)</p>"},{"location":"reference/models/#otto.models.Clip.start","title":"<code>start: Optional[float]</code>  <code>class-attribute</code>","text":"<p>Offset the start time of the clip</p>"},{"location":"reference/models/#otto.models.Clip.type","title":"<code>type: Optional[str]</code>  <code>class-attribute</code>","text":"<p>The source type: video, image, template</p>"},{"location":"reference/models/#otto.models.Edl","title":"<code>Edl</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>EDL: Edit Decision List</p> <p>A data object representing the video to be renendered.</p> <p>Attributes:</p> Name Type Description <code>clips</code> <code>List[Clip]</code> <p>List[Clip] A list of clips</p> <code>duration</code> <code>float</code> <p>float = None</p> Source code in <code>otto/models.py</code> <pre><code>class Edl(BaseModel):\n\"\"\"EDL: Edit Decision List\n\n    A data object representing the video to be renendered.\n\n    Attributes:\n        clips: List[Clip] A list of clips\n        duration: float = None\n    \"\"\"\n\n    clips: List[Clip]\n    duration: float = None\n</code></pre>"},{"location":"reference/models/#otto.models.FX","title":"<code>FX</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>FX options</p> Source code in <code>otto/models.py</code> <pre><code>class FX(BaseModel):\n\"\"\"FX options\"\"\"\n\n    name: str\n    data: Optional[dict]\n</code></pre>"},{"location":"reference/models/#otto.models.TemplateData","title":"<code>TemplateData</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Options for Template data</p> Source code in <code>otto/models.py</code> <pre><code>class TemplateData(BaseModel):\n\"\"\"Options for Template data\"\"\"\n\n    text: Optional[str]\n    textsize: Optional[tuple]\n    color: Optional[str]\n    themecolor: Optional[str]\n    fontsize: Optional[float]\n    font: Optional[str]\n    method: Optional[str] = 'label'\n    bg: Optional[str]\n    align: Optional[str]\n    position: Optional[Union[Tuple, str]]\n    fxs: Optional[List[FX]]\n</code></pre>"},{"location":"reference/templates/","title":"Templates","text":"<p>Templates</p> <p>Prebuilt Template blocks, designed to be rendered to Clips</p>"},{"location":"reference/templates/#otto.templates.bullets","title":"<code>bullets(text, data=None, color=None, themecolor=None, fontsize=None, textsize=None, clipsize=(1920, 1080), font='Open-Sans', method='caption', start=0, duration=None, position=('center', 'center'), opacity=0.4, fps=30, fxs=[], **kwargs)</code>","text":"<p>DEPRICATED Render bullet points to a video. Use textBox instead.</p> Source code in <code>otto/templates.py</code> <pre><code>def bullets(\n    text,\n    data=None,\n    color=None,\n    themecolor=None,\n    fontsize=None,\n    textsize=None,\n    clipsize=(1920, 1080),\n    font='Open-Sans',\n    method='caption',\n    start=0,\n    duration=None,\n    position=('center', 'center'),\n    opacity=0.4,\n    fps=30,\n    fxs=[],\n    **kwargs,\n):\n\"\"\"**DEPRICATED** Render bullet points to a video. Use textBox instead.\"\"\"\n\n    try:\n        data = data or defaults\n        color = color or data['fontcolor']\n        themecolor = themecolor or data['themecolor']\n        textsize = textsize or (clipsize[0] // 2, clipsize[1] // 2)\n        text = text.split('\\u2022')\n        text = [t.strip() for t in text if t.strip()]\n        print(\n            'bullet texts',\n            text,\n        )\n        clips = []\n        st = 0\n        for t in text:\n            d = 2 + pow(len(t.split(' ')), 0.6)\n            clip = TextClip(\n                t,\n                color=color,\n                fontsize=fontsize,\n                size=textsize,\n                font=font,\n                method=method,\n                stroke_color=None,\n            ).set_position(position)\n            bkg = (\n                ColorClip((clip.w, clip.h), color=rgbToDec(themecolor))\n                .set_position(clip.pos)\n                .set_opacity(opacity)\n            )\n            if len(fxs) == 0:\n                fxs.append(\n                    (\n                        boxShrink(\n                            duration=clip.duration,\n                            size=textsize,\n                            fill=rgbToDec(themecolor),\n                        ).set_position(('left', 'bottom'))\n                    )\n                )\n            if not duration or st + d &lt;= duration:\n                clips.append(\n                    CompositeVideoClip([bkg, clip, *fxs], size=clipsize)\n                    # .set_start(st)\n                    .set_duration(d)\n                    .crossfadein(1)\n                    .crossfadeout(1)\n                )\n                print('added clip', t, clip, st, d)\n            if duration and st + d &gt; duration:\n                # clips.append(CompositeVideoClip([''], duration=duration - st))\n                print('adding blank clip', st, duration - st)\n                clips.append(\n                    CompositeVideoClip(\n                        [ColorClip(clipsize, color=(0, 0, 0, 0))]\n                    ).set_duration(duration - st)\n                )\n                break\n            st += d\n        final = concatenate_videoclips(clips)\n        if duration:\n            final = final.set_duration(duration)\n        return final\n    except Exception as e:\n        print('error making bullets', e)\n</code></pre>"},{"location":"reference/templates/#otto.templates.final","title":"<code>final(text, address=None, website=None, phone=None, data=None, color=None, themecolor=None, fontsize=None, clipsize=(1920, 1080), font='Segoe-UI-Bold', method='caption', start=0, duration=5, position='center', opacity=0.4, fps=30, **kwargs)</code>","text":"<p>DEPRICATED Render an \"End Credits\" style information block</p> Source code in <code>otto/templates.py</code> <pre><code>def final(\n    text,\n    address=None,\n    website=None,\n    phone=None,\n    data=None,\n    color=None,\n    themecolor=None,\n    fontsize=None,\n    clipsize=(1920, 1080),\n    font='Segoe-UI-Bold',\n    method='caption',\n    start=0,\n    duration=5,\n    position='center',\n    opacity=0.4,\n    fps=30,\n    **kwargs,\n):\n\"\"\"**DEPRICATED** Render an \"End Credits\" style information block\"\"\"\n    try:\n        data = data or defaults\n        color = color or data['fontcolor']\n        themecolor = themecolor or data['themecolor']\n        fontsize = fontsize or pow(clipsize[1], 0.9) / 6 - 10\n        texts = [\n            TextClip(\n                text,\n                color=color,\n                fontsize=fontsize * 1.5,\n                size=clipsize,\n                font=font,\n                method=method,\n                stroke_color=None,\n                # align='north').set_position(('center', 'top')),\n            ).set_position((0, -clipsize[1] // 4)),\n            TextClip(\n                address or data['address'],\n                color=color,\n                fontsize=fontsize * 0.75,\n                size=clipsize,\n                font=font,\n                method=method,\n                stroke_color=None,\n                # align='west').set_position(('left', 'center')),\n            ).set_position((0, -clipsize[1] // 24)),\n            TextClip(\n                website or data['website'],\n                color=color,\n                fontsize=fontsize,\n                size=clipsize,\n                font=font,\n                method=method,\n                stroke_color=None,\n                # align='south').set_position(('center', 'bottom')),\n            ).set_position((0, clipsize[1] // 8)),\n            TextClip(\n                phone or data['phone'],\n                color=color,\n                fontsize=fontsize,\n                size=clipsize,\n                font=font,\n                method='label',\n                stroke_color=None,\n                # align='east').set_position(('right', 'center')),\n            ).set_position((0, clipsize[1] // 4)),\n        ]\n\n        # fiag = flyInAndGrow(size=size,\n        #         duration=duration,\n        #         fill=rgbToDec(themecolor),\n        #         transparent=True)\n\n        dbo = drawBoxOutline(\n            size=(int(clipsize[0] * 0.85), int(clipsize[1] * 0.85)),\n            duration=duration,\n            fill=rgbToDec(themecolor),\n            transparent=True,\n        )\n\n        return (\n            CompositeVideoClip([dbo, *texts], size=clipsize)\n            .set_fps(fps)\n            .set_duration(duration)\n            .set_position((0, 0))\n            .crossfadein(1)\n            .crossfadeout(1)\n        )\n    except Exception as e:\n        print('error making final', e)\n</code></pre>"},{"location":"reference/templates/#otto.templates.initial","title":"<code>initial(text, data=None, color=None, themecolor=None, fontsize=None, clipsize=(1920, 1080), textsize=None, font='Open-Sans', method='caption', start=0, duration=None, position='center', opacity=0.4, fps=30, bg=None, fxs=[], **kwargs)</code>","text":"<p>DEPRICATED Initial screen for video. Use textBox instead</p> Source code in <code>otto/templates.py</code> <pre><code>def initial(\n    text,\n    data=None,\n    color=None,\n    themecolor=None,\n    fontsize=None,\n    clipsize=(1920, 1080),\n    textsize=None,\n    font='Open-Sans',\n    method='caption',\n    start=0,\n    duration=None,\n    position='center',\n    opacity=0.4,\n    fps=30,\n    bg=None,\n    fxs=[],\n    **kwargs,\n):\n\"\"\"**DEPRICATED** Initial screen for video. Use textBox instead\"\"\"\n\n    try:\n        data = data or defaults\n        color = color or data['fontcolor']\n        themecolor = themecolor or data['themecolor']\n        textsize = textsize or (clipsize[0] // 2, clipsize[1] // 2)\n        text = text.split('. ')\n        text = [t.strip() for t in text if t.strip()]\n        texts = []\n        bkgs = []\n        st = 0\n        d = 0\n        tlen = len(text) - 1\n        for i, t in enumerate(text):\n            d = 2 + pow(len(t.split(' ')), 0.6)\n            if duration and st + d &gt; duration:\n                d = duration - st\n            if duration and i == tlen and st + d &lt; duration:\n                d = duration - st\n            tc = (\n                TextClip(\n                    t,\n                    color=color,\n                    fontsize=fontsize,\n                    size=textsize,\n                    font=font,\n                    method=method,\n                    stroke_color=None,\n                    # align='west'\n                )\n                .set_start(st)\n                .set_duration(d)\n                .set_position(position)\n                .resize(textsize)\n                .crossfadein(1)\n                .crossfadeout(1)\n            )\n            texts.append(tc)\n            if bg:\n                bkgs.append(\n                    ColorClip((tc.w, tc.h), color=rgbToDec(bg))\n                    .set_duration(tc.duration)\n                    .set_start(tc.start)\n                    .set_position(tc.pos)\n                    .set_opacity(opacity)\n                    .crossfadein(1)\n                    .crossfadeout(1)\n                )\n            st += d\n        print('initial', bkgs, texts)\n        return (\n            CompositeVideoClip([*bkgs, *texts, *fxs], size=clipsize)\n            .set_position(position)\n            .set_duration(duration or d)\n            .set_fps(30)\n        )\n    except Exception as e:\n        print('error making initial', e)\n</code></pre>"},{"location":"reference/templates/#otto.templates.textBox","title":"<code>textBox(text, data=None, color=None, themecolor=None, fontsize=None, clipsize=(1920, 1080), textsize=None, font='Open-Sans', method='label', start=0, duration=None, position='center', opacity=0.4, fps=30, bg=None, align='center', fxs=None, **kwargs)</code>","text":"<p>Render a block of text in a bounding box</p> Source code in <code>otto/templates.py</code> <pre><code>def textBox(\n    text,\n    data=None,\n    color=None,\n    themecolor=None,\n    fontsize=None,\n    clipsize=(1920, 1080),\n    textsize=None,\n    font='Open-Sans',\n    method='label',\n    start=0,\n    duration=None,\n    position='center',\n    opacity=0.4,\n    fps=30,\n    bg=None,\n    align='center',\n    fxs=None,\n    **kwargs,\n):\n\"\"\"Render a block of text in a bounding box\"\"\"\n\n    try:\n        color = color or defaults['fontcolor']\n        themecolor = themecolor or defaults['themecolor']\n        textsize = textsize or (clipsize[0] // 2, clipsize[1] // 2)\n        text = text.strip()\n        tc = CompositeVideoClip(\n            [\n                TextClip(\n                    text,\n                    color=color,\n                    fontsize=fontsize,\n                    size=textsize,\n                    font=font,\n                    method=method,\n                    stroke_color=None,\n                    align=align,\n                )\n                .set_start(start)\n                .set_duration(duration)\n                .set_position(position)\n                # .resize(textsize)\n                .set_fps(fps)\n                .crossfadein(1)\n                .crossfadeout(1)\n            ],\n            size=clipsize,\n        )\n        if fxs:\n            for fx in fxs:\n                effect = getattr(ct, fx['name'])\n                tc = tc.set_position(\n                    lambda t: (\n                        effect(**fx['data']).evaluate(t).tolist()[0][0] if t &lt; 1 else 0,\n                        0,\n                    ),\n                    relative=True,\n                )\n        bkgs = []\n        if bg:\n            bkgs.append(\n                ColorClip((tc.w, tc.h), color=rgbToDec(bg))\n                .set_duration(tc.duration)\n                .set_start(tc.start)\n                .set_position(tc.pos)\n                .set_opacity(opacity)\n                .crossfadein(1)\n                .crossfadeout(1)\n            )\n\n        print('textBox', bkgs, fxs)\n        return tc\n    except Exception as e:\n        print('error making textBox', e)\n</code></pre>"},{"location":"reference/templates/#otto.templates.title","title":"<code>title(text, data=None, color=None, themecolor=None, fontsize=None, clipsize=(1920, 1080), textsize=None, font='Open-Sans', method='caption', duration=5, position='center', opacity=0.4, fps=30, bg=None, **kwargs)</code>","text":"<p>Render a large Title block of text</p> Source code in <code>otto/templates.py</code> <pre><code>def title(\n    text,\n    data=None,\n    color=None,\n    themecolor=None,\n    fontsize=None,\n    clipsize=(1920, 1080),\n    textsize=None,\n    font='Open-Sans',\n    method='caption',\n    duration=5,\n    position='center',\n    opacity=0.4,\n    fps=30,\n    bg=None,\n    **kwargs,\n):\n\"\"\"Render a large Title block of text\"\"\"\n    try:\n        color = color or defaults['fontcolor']\n        themecolor = themecolor or defaults['themecolor']\n        textsize = textsize or (clipsize[0] // 2, clipsize[1] // 2)\n        t = TextClip(\n            text.strip(),\n            color=color,\n            fontsize=fontsize,\n            size=textsize,\n            font=font,\n            method=method,\n            stroke_color=None,\n        ).set_position(position)\n        boxclip = boxReveal(\n            duration=duration, size=textsize, fill=rgbToDec(themecolor)\n        ).set_position(position)\n        bgvid = makeColor(\n            textsize, color=rgbToDec(bg) if bg else (0, 0, 0), opacity=0.5 if bg else 0\n        ).set_position(position)\n        return (\n            CompositeVideoClip(\n                [bgvid, t, boxclip] if bg else [t, boxclip], size=clipsize\n            )\n            .set_position(position)\n            .set_fps(fps)\n            .set_duration(duration)\n            .crossfadein(1)\n            .crossfadeout(1)\n        )\n    except Exception as e:\n        print('error making title', e)\n</code></pre>"}]}